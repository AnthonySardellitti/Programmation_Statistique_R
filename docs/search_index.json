[
["entrainement.html", "Chapitre 12 S‚Äôentrainer 12.1 TP1 (difficult√© : üèÜ) 12.2 TP2 (difficult√© : üèÜüèÜ) 12.3 TP3 (difficult√© : üèÜüèÜüèÜ) 12.4 TP4 - R√©cap (difficult√© : üèÜüèÜ) 12.5 TP5 - Chercher l‚Äôerreur (difficult√© : üèÜüèÜ)", " Chapitre 12 S‚Äôentrainer 12.1 TP1 (difficult√© : üèÜ) Ce TP reprend les notions √©voqu√©es dans les chapitres 2 et 3. On utilise le dataset mtcars qui d√©crit les statistiques de voitures. Le dataset est pr√©sent dans le package datasets automatiquement install√© sur R. Voici une description des donn√©es : mpg : Miles/(US) gallon cyl : Number of cylinders disp : Displacement (cu.in.) hp : Gross horsepower drat : Rear axle ratio wt : Weight (1000 lbs) qsec : 1/4 mile time vs : Engine (0 = V-shaped, 1 = straight) am : Transmission (0 = automatic, 1 = manual) gear : Number of forward gears carb : Number of carburetors mpg cyl disp hp drat wt qsec vs am gear carb Mazda RX4 21.0 6 160.0 110 3.90 2.620 16.46 0 1 4 4 Mazda RX4 Wag 21.0 6 160.0 110 3.90 2.875 17.02 0 1 4 4 Datsun 710 22.8 4 108.0 93 3.85 2.320 18.61 1 1 4 1 Hornet 4 Drive 21.4 6 258.0 110 3.08 3.215 19.44 1 0 3 1 Hornet Sportabout 18.7 8 360.0 175 3.15 3.440 17.02 0 0 3 2 Valiant 18.1 6 225.0 105 2.76 3.460 20.22 1 0 3 1 Duster 360 14.3 8 360.0 245 3.21 3.570 15.84 0 0 3 4 Merc 240D 24.4 4 146.7 62 3.69 3.190 20.00 1 0 4 2 Merc 230 22.8 4 140.8 95 3.92 3.150 22.90 1 0 4 2 Merc 280 19.2 6 167.6 123 3.92 3.440 18.30 1 0 4 4 Exercice 1 : Pr√©parer son environnement de travail Dupliquer le dataset dans un nouvel objet appel√© df. Combien de lignes, colonnes sont pr√©sentes dans ce dataset (utilisez les fonctions adapt√©es) ? Affichez le nom des colonnes Affichez le type des colonnes avec la fonction adapt√©e. On souhaite analyser les variables cyl, vs, am, gear et carb en tant que variables qualitatives. Modifier le type de ces variables pour les transformer en type factor. Combien de niveaux (levels) sont pr√©sents dans ces variables ? Affichez un r√©sum√© des donn√©es avec la fonction adapt√©e. Exercice 2 : Statistiques descriptives D√©terminer la moyenne de la variable mpg D√©terminer le maximum la variable wt. D√©terminer la m√©diane de la variable hp. D√©terminer les quartiles de la variable qsec. D√©terminer les d√©ciles de la variable qsec. D√©terminer la variance et l‚Äô√©cart-type de la variable qsec. D√©terminer un tri √† plat pour compter les effectifs des modalit√©s de chaque variables factor. Exercice 3 : Quelques graphiques Contruire un histogramme de la distribution de la variable qsec. Constuire une bo√Æte √† moustache de la distribution de la variable qsec. Construire un diagramme en barre de r√©partition de la variable carb. Construire un diagramme circulaire de la r√©partition de la variable vs. Exercice 4 : Cr√©ation de nouvelles colonnes La colonne mpg correspond au nombre de miles parcouru en 1 gallon (US). Cette mesure correspond en quelques sortes √† la mesure de consommation de litres aux 100 km utilis√©e en France. Cr√©er une colonne suppl√©mentaire appel√©e litres_au_100km qui correspond √† la conversion de la variable mpg(Miles/(US) gallon) en nombre de litres aux 100 kilom√®tres. Aidez-vous du guide des conversion disponible sur ce lien. Construire une nouvelle colonne appel√©e qsec_cut qui est un d√©coupage de la variable qsec en 3 groupes (pas de restriction sur le nombre de classe). Construire une nouvelle colonne appel√©e litres100km_group pour distinguer deux groupes de voiture : celles qui consomment plus que la moyenne et celles qui consomment moins que la moyenne. 12.2 TP2 (difficult√© : üèÜüèÜ) Ce TP reprend les notions √©voqu√©es dans les chapitres 2 √† 5. On utilise le fichier pokemon.xlsx qui d√©crit les statistiques des pokemon des deux premi√®res g√©n√©rations. Le fichier est issu du site Kaggle. Il a √©t√© adapt√© pour ce TP. Pour r√©aliser ce TP, t√©l√©charger le fichier en cliquant ici.Voici une description des donn√©es : pokedex_number : num√©ro du pokemon nom : nom du pokemon generation : le num√©ro de g√©n√©ration dont est issu le pokemon is_legendary : Oui / Non si le pokemon est l√©gendaire type : le type du pokemon weight_kg : le poids du pokemon en kg height_m : la taille du pokemon en m√®tre attack : la puissance d‚Äôattaque du pokemon defense : la puissance de d√©fense du pokemon speed : la vitesse du pokemon pokedex_number nom generation is_legendary type weight_kg height_m attack defense speed 1 Bulbizarre 1 Non grass 6.9 0.7 49 49 45 2 Herbizarre 1 Non grass 13.0 1.0 62 63 60 3 Florizarre 1 Non grass 100.0 2.0 100 123 80 4 Salameche 1 Non fire 8.5 0.6 52 43 65 5 Reptincel 1 Non fire 19.0 1.1 64 58 80 6 Dracaufeu 1 Non fire 90.5 1.7 104 78 100 7 Carapuce 1 Non water 9.0 0.5 48 65 43 8 Carabaffe 1 Non water 22.5 1.0 63 80 58 9 Tortank 1 Non water 85.5 1.6 103 120 78 10 Chenipan 1 Non bug 2.9 0.3 30 35 45 11 Chrysacier 1 Non bug 9.9 0.7 20 55 30 12 Papilusion 1 Non bug 32.0 1.1 45 50 70 13 Aspicot 1 Non bug 3.2 0.3 35 30 50 14 Coconfort 1 Non bug 10.0 0.6 25 50 35 15 Dardargnan 1 Non bug 29.5 1.0 150 40 145 16 Roucool 1 Non normal 1.8 0.3 45 40 56 17 Roucoups 1 Non normal 30.0 1.1 60 55 71 18 Roucarnage 1 Non normal 39.5 1.5 80 80 121 19 Rattata 1 Non normal NA NA 56 35 72 20 Rattatac 1 Non normal NA NA 71 70 77 Exercice 1 : Importer les donn√©es Importez le jeu de donn√©es pokemon.xlsx √† l‚Äôaide du package readxl. Combien de lignes, colonnes sont pr√©sentes dans ce dataset (utilisez les fonctions adapt√©es) ? Affichez le nom des colonnes. Affichez le type des colonnes avec la fonction adapt√©e. On souhaite analyser les variables generation, is_legendary, et type en tant que variables qualitatives. Modifier le type de ces variables pour les transformer en type factor. Combien de niveaux (levels) sont pr√©sents dans ces variables ? Affichez un r√©sum√© des donn√©es avec la fonction adapt√©e. Exercice 2 : Statistiques descriptives D√©terminer la moyenne de la variable weight_kg. D√©terminer la m√©diane de la variable weight_kg. D√©terminer les quartiles de la variable height_m. D√©terminer les d√©ciles de la variable height_m. D√©terminer la variance et l‚Äô√©cart-type de la variable weight_kg. D√©terminer un tri √† plat pour compter les effectifs des modalit√©s de chaque variable factor en triant chaque sortie par ordre d√©croissant. Exercice 3 : Tris et Selections Pour chaque question suivante, affectez le r√©sultat de la requ√™te dans un objet puis calculez sa dimension. Exemple : #Selectionnez les deux premi√®res colonnes du data frame requete_0 &lt;- pokemon[,1:2] dim(requete_0) ## [1] 251 2 S√©lectionnez la colonne nom et is_legendary. S√©lectionnez les 50 premi√®res lignes et les deux premi√®res colonnes. S√©lectionnez les 10 premi√®res lignes et toutes les colonnes. S√©lectionnez toutes les colonnes sauf la derni√®re. S√©lectionnez les colonnes 2,8,9 et 10. S√©lectionnez les lignes 20 √† 30 et 80 √† 100. Triez le dataset par ordre alphab√©tique et afficher le nom du pokemon dela premi√®re ligne. Triez le dataset par weight_kg en ordre d√©croissant, et afficher le nomdu pokemon de la premi√®re ligne Triez le dataset par attack en ordre d√©croissant puis par speed en ordre croissant, et afficher le nom des pokemons des 10 premi√®res lignes. Exercice 4 : Tris et Filtres Pour chaque question suivante, affectez le r√©sultat de la requ√™te dans un objet puis calculez sa dimension. Pour faciliter la lecture, s√©lectionnez la colonne nomet les colonnes concern√©es par le filtre. Exemple : #Selectionnez les pokemons de type feu requete_0 &lt;- pokemon[ pokemon$type == &quot;fire&quot;, c(&quot;nom&quot;,&quot;type&quot;)] dim(requete_0) ## [1] 20 2 Filtrez sur les pokemons qui ont 150 ou plus d‚Äôattack puis trier le r√©sultat par ordre d√©croissant d‚Äôattack. Filtrez sur les pokemons de type dragon,ghost,psychic et dark Filtrez sur les pokemons de type fire avec plus de 100 d‚Äôattack, puis trier le r√©sultat par ordre d√©croissant d‚Äôattack. Filtrez sur les pokemons qui ont entre 100 et 150 de speed. Les trier par speed d√©croissant. Filtrez sur les pokemons pesant plus de 250 kg et affichez le r√©sultat pour v√©rifier. Filtrez sur les pok√©mons qui ont des valeurs manquantes sur la variable height_m. Filtrez sur les pokemons qui ont des valeurs renseign√©es √† la fois pour la variable weight_kg et la variable height. Exercice 5 : Agregations Pour chaque question suivante, affectez le r√©sultat de la requ√™te dans un objet puis calculez sa dimension. Exemple : #Calculez la vitesse moyenne par generation requete_0 &lt;- aggregate(formula = speed ~ generation, data = pokemon , FUN = mean) dim(requete_0) ## [1] 2 2 generation speed 1 70.15232 2 61.61000 Calculez l‚Äôattack moyenne en fonction de la variable type, puis filtrez sur les 3 types avec les moyennes les plus √©lev√©es. Calculez le nombre de pokemon par type , puis triez par ordre d√©croissant ces effectifs. Calculez la m√©diane de weight_kg par type. Calculez le nombre de pokemon par type et generation Calculez la moyenne de chaque crit√®re (weight_kg, height_m, attack, defense et speed) en fonction de chaque type. 12.3 TP3 (difficult√© : üèÜüèÜüèÜ) Ce TP reprend les notions √©voqu√©es dans les chapitres 6,7 et 10. On utilise le fichier compress√© AmongUs.7z o√π l‚Äôensemble des fichiers d√©crivent les statistiques des parties jou√©es sur le jeu Among Us. Il y a un fichier par joueur nomm√© UserX.csv. Les donn√©es sont issues du site Kaggle. Pour r√©aliser ce TP, t√©l√©charger le fichier en cliquant ici. Les fichiers csv ont tous la m√™me structure avec : Game.Completed.Date : Date de la partie Team : l‚Äô√©quipe attribu√©e Outcome : r√©sultat de la partie Task.Completed : le nombre de t√¢ches effectu√©es All.Tasks.Completed : si toutes les t√¢ches ont √©t√© effectu√©es Murdered : si le joueur a √©t√© tu√© Imposter.Kills : le nombre de joueurs tu√©s par l‚Äôimposteur Game.Length : dur√©e de la partie Ejected : si le joueur a √©t√© √©limin√© par les autres au cours de la partie Sabotages.Fixed : nombre de sabotages r√©par√©s Time.to.complete.all.tasks : temps pour compl√©ter les toutes les t√¢ches Rank.Change : Non renseign√© Region.Game.Code : la r√©gion du serveur de jeu Game.Completed.Date Team Outcome Task.Completed All.Tasks.Completed Murdered Imposter.Kills Game.Length Ejected Sabotages.Fixed Time.to.complete.all.tasks Rank.Change Region.Game.Code 12/13/2020 at 1:26:56 am EST Crewmate Win 3 No Yes 07m 04s No 2 ++ NA / WYMSBF 12/13/2020 at 1:17:42 am EST Crewmate Loss 7 Yes No 16m 21s No 1 09m 48s ‚Äì NA / WYMSBF 12/13/2020 at 12:57:47 am EST Crewmate Win 3 No No 11m 33s No 0 ++ NA / WYMSBF 12/13/2020 at 12:41:55 am EST Imposter Win 2 08m 05s No N/A +++ Europe / QIRTNF 12/13/2020 at 12:30:37 am EST Crewmate Loss 4 No No 05m 10s No 0 ‚Äî Europe / QIRTNF 12/13/2020 at 12:24:20 am EST Crewmate Loss 7 Yes Yes 16m 22s No 0 12m 16s ‚Äì Europe / QIRTNF 12/13/2020 at 12:00:39 am EST Crewmate Loss 8 Yes Yes 21m 41s No 1 18m 38s ‚Äì Europe / MTKPVF 12/11/2020 at 4:15:08 pm EST Crewmate Win 8 Yes No 18m 43s Yes 0 07m 48s ++ Europe / BFRJCF 12/11/2020 at 3:49:33 pm EST Crewmate Win 7 Yes Yes 13m 15s No 0 13m 15s ++ Europe / BFRJCF 12/11/2020 at 3:30:36 pm EST Crewmate Loss 7 Yes Yes 12m 43s No 0 12m 43s ‚Äì Europe / BFRJCF 12/11/2020 at 3:10:58 pm EST Crewmate Win 4 No Yes 11m 00s No 0 ++ Europe / BFRJCF 12/11/2020 at 2:53:28 pm EST Crewmate Win 7 Yes No 17m 43s No 0 11m 59s ++ Europe / BFRJCF 12/11/2020 at 2:20:38 pm EST Crewmate Loss 6 No Yes 13m 46s No 0 ‚Äî Europe / ONSJWQ 12/11/2020 at 2:04:26 pm EST Imposter Loss 3 15m 52s Yes N/A Europe / ONSJWQ 12/11/2020 at 1:46:30 pm EST Crewmate Win 7 Yes Yes 18m 54s No 1 11m 09s ++ Europe / ONSJWQ 12/11/2020 at 2:09:32 am EST Crewmate Loss 7 Yes Yes 08m 00s No 0 01m 41s ‚Äì NA / EYNONF 12/11/2020 at 2:00:26 am EST Crewmate Win 7 Yes Yes 18m 06s No 0 09m 34s ++ NA / EYNONF 12/11/2020 at 1:26:11 am EST Crewmate Win 7 Yes Yes 12m 58s No 1 09m 03s ++ NA / EYNONF 12/11/2020 at 1:03:05 am EST Crewmate Win 7 Yes Yes 14m 57s No 0 14m 50s ++ NA / EYNONF 12/11/2020 at 12:45:34 am EST Crewmate Loss 7 Yes Yes 11m 03s No 0 10m 34s ‚Äì NA / EYNONF Exercice 1 : Cr√©er le jeu de donn√©es T√©l√©charger le fichier compress√© AmongUs.7z et le d√©ziper. La fonction list.files() devrait vous aider √† extraire l‚Äôensemble des noms de fichiers pr√©sents dans un r√©pertoire (voir l‚Äôexemple ci-dessous). list.files(path = &quot;dataset/&quot;, pattern=&quot;*.csv&quot;, full.names=FALSE) ## [1] &quot;AmongUs.csv&quot; &quot;characters.csv&quot; &quot;flights.csv&quot; &quot;google.csv&quot; ## [5] &quot;NBA.csv&quot; &quot;planes.csv&quot; &quot;starwars.csv&quot; &quot;Titanic.csv&quot; Compiler l‚Äôensemble des fichiers UserX.csv pr√©sents dans le fichier zip dans un seul et m√™me data frame. Utiliser une boucle qui parcourt chaque fichier csv utilisateur. La fonction rbind() devrait vous aider √† compiler les diff√©rents csv dans un seul data frame (voir l‚Äôexemple ci-dessous). üì¢ Attention, pour le bon d√©roulement du TP, int√©grer l‚Äôargument stringsAsFactors = FALSE dans votre fonction read.csv(). Cet argument permet de ne pas typer par d√©faut les variables character en factor lors de l‚Äôimportation. df &lt;- data.frame() dim(df) ## [1] 0 0 df &lt;- rbind(df, mtcars) dim(df) ## [1] 32 11 df &lt;- rbind(df, mtcars) dim(df) ## [1] 64 11 Modifier votre boucle afin d‚Äôajouter une colonne dans le data frame final qui renseigne le num√©ro d‚Äôutilisateur disponible dans le nom de chaque fichier csv. üí° indice : Il est plus simple d‚Äôajouter une colonne avec le nom du fichier juste avant la fonction rbind(). Stocker le data frame final dans un objet appel√© AmongUs. Supprimer la colonne Rank.Change qui est inutile. On observe des valeurs manquantes dans le dataset √† travers les champs - et N/A, on souhaite remplacer ces valeurs textuelles par la v√©ritable valeur NA permettant d‚Äôindiquer √† R que la valeur est manquante. Construire une fonction appel√©e manage_na() qui prend en entr√©e : un vecteur x correspondra √† une colonne d‚Äôun dataset. un vecteur string_to_na correspondant √† la liste des cha√Ænes de caract√®res qu‚Äôon souhaite transformer en NA. La fonction retournera le vecteur modifi√©. üí° indice : voici ci-dessous la t√™te que doit avoir votre fonction : manage_na &lt;- function(x, string_to_na) { ... ... ... return(x_modif) } Construire une boucle qui parcourt toutes les colonnes du data frame AmongUs et qui remplace les champs avec des - et N/A par des valeurs manquantes NA. Utilisez la fonction manage_na() cr√©√©e pr√©c√©demment. Exercice 2 : Manipuler le texte et les dates √Ä partir de la colonne Game.Completed.Date, construire une colonne appel√©e Date avec la date de la partie au format yyyy-mm-dd uniquement. Veiller √† ce que le type de cette colonne soit Date. √Ä partir de la colonne Game.Completed.Date, construire une colonne appel√©e Heure avec l‚Äôheure uniquement de la partie. Attention au format am et pm. √Ä partir de la colonne Game Length, construire une colonne appel√©e Game.Length.sec correspondant √† la dur√©e de la partie en secondes. √Ä partir de la colonne Time.to.complete.all.tasks, construire une colonne appel√©e Complete.all.tasks.sec correspondant √† la dur√©e en secondes pour compl√©ter toutes les t√¢ches. √Ä partir de la colonne Region.Game.Code construire une colonne appel√©e Region correspondant au nom du continent uniquement. Exercice 3 : Type des variables Combien de lignes, colonnes sont pr√©sentes dans ce dataset (Utiliser la fonction adapt√©e) ? Afficher un r√©sum√© des donn√©es avec la fonction adapt√©e. Veiller √† ce que les types de chaque colonne du dataset correspondent aux types ci-dessous. Sinon, convertir les variables dans leur type appropri√©. Variable Type souhait√© Game.Completed.Date character Team factor Outcome factor Task.Completed numeric All.Tasks.Completed factor Murdered factor Imposter.Kills numeric Game.Length character Ejected factor Sabotages.Fixed numeric Time.to.complete.all.tasks character Region.Game.Code character Date Date Heure numeric Game.Length.sec numeric Complete.all.tasks.sec numeric Region factor üì¢ Attention, lorsqu‚Äôon convertit un vecteur de type factor en type numeric, il est recommand√© de passer d‚Äôabord par le type character (voir exemple ci-dessous). Ce ne sera peu √™tre pas utile pour ce TP, mais c‚Äôest bien de le savoir ! Ce qu‚Äôil ne faut pas faire ‚õî x &lt;- factor(c(7,7,8,7,9,6,6)) levels(x) ## [1] &quot;6&quot; &quot;7&quot; &quot;8&quot; &quot;9&quot; x &lt;- as.numeric(x) x ## [1] 2 2 3 2 4 1 1 Ce qu‚Äôil faut faire ‚úÖ x &lt;- factor(c(7,7,8,7,9,6,6)) levels(x) ## [1] &quot;6&quot; &quot;7&quot; &quot;8&quot; &quot;9&quot; x &lt;- as.numeric(as.character(x)) x ## [1] 7 7 8 7 9 6 6 V√©rifier si cela a fonctionn√© en affichant le type de chaque variable du data frame. Exercice 4 : Analyses statistiques La plupart des questions de cet exercice demandent un peu de r√©flexion. üì¢ Ne partez pas √† l‚Äôabordage, les solutions peuvent se coder en plusieurs √©tapes (tris,filtres, agregations, etc.). Quelle est la dur√©e moyenne d‚Äôune partie ? Combien y-a-t-il de r√©gions serveurs diff√©rentes ?. Combien de t√¢che maximum un Crewmate peut-il r√©aliser ? Quel est le taux de parties remport√©es par les imposteurs ? Construire un graphique adapt√© permettant de visualiser la r√©partition du nombre de parties jou√©es selon laRegion. Construire un graphique adapt√© permettant de visualiser la r√©partition des joueurs qui termine ou pas leurs t√¢ches selon s‚Äôils se font tuer ou pas. Construire un graphique adapt√© permettant de visualiser la distribution du nombre de t√¢ches compl√©t√©es par les joueurs. Construire un graphique adapt√© permettant de visualiser pour chaque partie jou√©e, la dur√©e de la partie et le temps pour compl√©ter toutes les t√¢ches. Construire un graphique adapt√© permettant de visualiser la distribution du temps des parties selon la Region. Construire un graphique adapt√© permettant de visualiser l‚Äô√©volution du nombre de parties jou√©es selon l‚Äôheure de la journ√©e. Construire un graphique adapt√© permettant de visualiser les variations du taux de succ√®s des imposteurs selon les r√©gions serveurs. Construire un graphique adapt√© permettant de visualiser les taux de succ√®s des 5 meilleurs utilisateurs. 12.4 TP4 - R√©cap (difficult√© : üèÜüèÜ) Ce TP reprend les notions √©voqu√©es dans les chapitres 2 √† 7. On utilise le fichier NBA.csv qui d√©crit les tirs effectu√©s au cours de la saison 2014-2015 de NBA. Le fichier est issu du site Kaggle. Il a √©t√© adapt√© et modifi√© pour ce cours. Les donn√©es sont accessibles en cliquant ici. Voici la pr√©sentation du jeu de donn√©es : GAME_ID : ID du match LOCATION : Lieu du match (Home / Away) GAME_RESULT : R√©sultat du match (Won / Lost) PERIOD : Num√©ro de quart-temps et prolongations √©ventuelles SHOT_CLOCK : Dur√©e de la possession de l‚Äô√©quipe au moment du tir DRIBBLES : Nombre de dribbles avant le tir TOUCH_TIME : Dur√©e de la possession du joueur avant le tir SHOT_DIST : Distance de tir en foot (1 foot = 0,30 m√®tre) PTS_TYPE : Tentative √† 2 ou 3 points (les lancers francs √† 1 point ne sont pas r√©pertori√©s) SHOT_RESULT : R√©sultat du tir (made / missed) CLOSE_DEF_DIST : Distance entre le tireur et le d√©fenseur le plus proche en foot (1 foot = 0,30 m√®tre) SHOOTER : Nom du tireur GAME_ID LOCATION GAME_RESULT PERIOD SHOT_CLOCK DRIBBLES TOUCH_TIME SHOT_DIST PTS_TYPE SHOT_RESULT CLOSE_DEF_DIST SHOOTER 21400899 A W 1 10.8 2 1.9 7.7 2 made 1.3 brian roberts 21400899 A W 1 3.4 0 0.8 28.2 3 missed 6.1 brian roberts 21400899 A W 1 NA 3 2.7 10.1 2 missed 0.9 brian roberts 21400899 A W 2 10.3 2 1.9 17.2 2 missed 3.4 brian roberts 21400899 A W 2 10.9 2 2.7 3.7 2 missed 1.1 brian roberts 21400899 A W 2 9.1 2 4.4 18.4 2 missed 2.6 brian roberts 21400899 A W 4 14.5 11 9.0 20.7 2 missed 6.1 brian roberts 21400899 A W 4 3.4 3 2.5 3.5 2 made 2.1 brian roberts 21400899 A W 4 12.4 0 0.8 24.6 3 missed 7.3 brian roberts 21400890 H W 2 17.4 0 1.1 22.4 3 missed 19.8 brian roberts 21400890 H W 2 16.0 8 7.5 24.5 3 missed 4.7 brian roberts 21400890 H W 4 12.1 14 11.9 14.6 2 made 1.8 brian roberts 21400890 H W 4 4.3 2 2.9 5.9 2 made 5.4 brian roberts 21400882 A W 4 4.4 0 0.8 26.4 3 missed 4.4 brian roberts 21400859 A L 1 6.8 0 0.5 22.8 3 missed 5.3 brian roberts 21400859 A L 2 6.4 3 2.7 24.7 3 made 5.6 brian roberts 21400859 A L 2 17.6 6 5.1 25.0 3 missed 5.4 brian roberts 21400859 A L 4 8.7 1 0.9 25.6 3 missed 5.1 brian roberts 21400859 A L 4 20.8 0 1.2 24.2 3 made 11.1 brian roberts 21400845 A W 1 17.5 2 2.2 25.4 3 missed 3.5 brian roberts Exercice 1 : Importer les donn√©es Importer le jeu de donn√©es NBA.csv. Combien de lignes, colonnes sont pr√©sentes dans ce dataset (utilisez les fonctions adapt√©es) ? Afficher le nom des colonnes. Afficher le type des colonnes avec la fonction adapt√©e. On souhaite analyser les variables PERIOD, PTS_TYPE, et SHOOTER en tant que variables qualitatives. Modifier le type de ces variables pour les transformer en type factor. Combien de niveaux (levels) sont pr√©sents dans ces variables ? Afficher un r√©sum√© des donn√©es avec la fonction adapt√©e. Exercice 2 : Statistiques descriptives Calculer l‚Äô√©cart-type de la variable pr√©sentant la distance de tir (SHOT_DIST). Calculer l‚Äô√©cart-type de la variable pr√©sentant la dur√©e de la possession de l‚Äô√©quipe au moment du tir (SHOT_CLOCK). Calculer la r√©partition du nombre de tirs manqu√©s et r√©ussis (SHOT_RESULT). Calculer les quartiles de la variable pr√©sentant le nombre de dribbles avant un tir (DRIBBLES). Calculer les d√©ciles de la variable pr√©sentant la distance entre le tireur et le d√©fenseur le plus proche (CLOSE_DEF_DIST). Combien de matchs se sont d√©roul√©s lors de cette saison de basket ? Combien y-a-t-il de SHOOTER diff√©rents ? Exercice 3 : Modifier le jeu de donn√©es Cr√©er une variable SHOT_DIST_METRE qui affiche la variable SHOT_DIST convertit en m√®tre (1 foot = 0,30 m√®tre). Cr√©er une variable PTS_MARQUES qui prend la valeur 0, 2 ou 3 en fonction de l‚Äôissue du tir. Supprimer la variable GAME_RESULT car elle est inutile. Exercice 4 : Interroger les donn√©es Attention, certaines questions peuvent n√©cessiter plusieurs √©tapes. Penser √† v√©rifier vos requ√™tes avec la fonction dim() ou View().Pour chaque question, affecter le r√©sultat ddans un objet comme dans l‚Äôexemple ci-dessous. #Selectionnez les deux premi√®res colonnes du data frame requete_0 &lt;- NBA[, c(1,2)] On souhaite extraire uniquement la colonne SHOOTER , SHOT_RESULT et PTS_TYPE dans cet ordre. On souhaite extraire uniquement les 50 premi√®res lignes. On souhaite extraire toutes les colonnes sauf la premi√®re. On souhaite extraire uniquement les 100 tirs tent√©s avec les SHOT_DIST les plus loin. On souhaite extraire uniquement les 100 tirs r√©ussis avec les SHOT_DIST les plus loin. On souhaite extraire uniquement les tirs r√©ussis √† 3 points de kobe bryant. On souhaite construire un data frame avec les 5 SHOOTER qui ont inscrit le plus de points. Bonus On souhaite construire un programme permettant de parcourir l‚Äôensemble des colonnes du data frame : Si la colonne est numeric,on souhaite construire un boxplot. Si la colonne est factor, on souhaite construire un barplot. Sinon, on ne fait rien. Pensez √† ajouter un titre sur les graphiques afin de savoir √† quelle variable on a √† faire. Dans une boucle,lorsqu‚Äôon souhaite affcher un graphique ou une sortie dans la console, il faut utiliser la fonction print(). 12.5 TP5 - Chercher l‚Äôerreur (difficult√© : üèÜüèÜ) Ce TP reprend les notions √©voqu√©es dans les chapitres 2 √† 7. Dans ce TP, vous incarnez un data analyst travaillant dans le service statistiques de la NBA. Un de vos coll√®gues est parti en vacances vendredi dernier et a envoyer √† votre manager quelques statistiques sur les tirs effectu√©s au cours de la saison 2014-2015. Le probl√®me c‚Äôest que le script est bourr√© de fautes ! Rien ne fonctionne, √† tous les coups, votre coll√®gue √©tait press√© de partir en vacance. Votre manager fait donc appel √† vous pour corriger les erreurs de ce script. Attention, votre manager aimerait √©galement comprendre ce que vous programmez dans votre script alors n‚Äôoubliez pas de commenter chaque ligne de code pour qu‚Äôil la comprenne. Le fichier de donn√©es (NBA.csv) et le script de votre coll√®gue (nba_stats.R) sont disponibles en cliquant ici. üéØ Votre manager a d√©j√† pass√© beaucoup de temps pour comprendre ce script et aimerait que votre correction garde la m√™me philosophie que le script de votre coll√®gue, cela signifie qu‚Äôil ne faut pas √©crire d‚Äôautres commandes R et simplement faire en sorte que celles d√©j√† pr√©sentes fonctionnent. "]
]
